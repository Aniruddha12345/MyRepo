* Java Editions-
1. Java SE(java standard edition) - It includes Java programming APIs such as java.lang, java.io, java.net, java.util, java.sql, java.math etc. It includes core topics like OOPs, String, Regex, Exception, Inner classes, Multithreading, I/O Stream, Networking, AWT, Swing, Reflection, Collection, etc.
2. Java EE(java enterprise edition) - mainly used to develop web and enterprise applications. It is built on the top of the Java SE platform. It includes topics like Servlet, JSP, Web Services, EJB, JPA, etc.
3. Java ME(java micro edition) - mainly used to develop mobile applications.
4. Java FX - It is used to develop rich internet applications. It uses a light-weight user interface API.

* In cpp, operator overloading is there & java doesn't suppport operator overloading.
  In cpp, const and goto keywords are there but in java they are there but unused instead of that final & continue is there.
  cpp support both call by value & call by reference but java only support call by value.
  
* jvm - virtual machine which takkes bite code and run on system. it is oplatform dependant
  jre - runtime environment consists of jvm + jars to run the application
  jdk - developement environment - jre + tools for developing the application(javac, java)

* Association, aggregation and composition.

* object based vs object oriented programming language - objects based does't support inheritance(ex javascript , vbscript).

* JIT compiler - 
   
   sourceCode.java--------> Compiler ----------> ByteCode -------
                                                                 |
                                                                 |
                   Native Machine Code<-------JIT Compiler <-----|
 JIT compiler in jvm compile bytecode into native machie code at run time.

* A java constructor can have access modifier while declaring(private, protected, public, default constructor)for control of object creation but can not be abstract, final, synchronized, static.

* Is-A relationship = Inheritance(parent-child relationship) ex- Swift is a car.
  Has-A relationship = If a class have an entity reference. ex -     class Employee{  
    																				int id;  
   																					String name;  
    																				Address address;//Address is a class  
    																				...  
   
    																				}  
* Overridong - an overridden method can have a different access modifier but it cannot lower the access scope.
                  1. Methods declared public in a superclass also must be public in all subclasses.
    		      2. Methods declared protected in a superclass must either be protected or public in subclasses; they cannot be private.
                  3. Methods declared private are not inherited at all, so there is no rule for them.



* 
					public class SuperClassTest {
						SuperClassTest() {
							System.out.println("Hiii");
						}

					}

					class ChildClassTest extends SuperClassTest {
						/*
						 * Internally 
						 * ChildClassTest(){ super();}
						 */
						public static void main(String[] args) {
							ChildClassTest s = new ChildClassTest();
						}
					}

* In class if there is instance block and constructor then while object creation, first instance block executed then construtor executed.

* For RUTIME POLYMORPHISM see the javatpoint -> Runtime polymorphism(with methods and data members)(see why data members not supports runtime polymorpism).

* Interface - 
  
  * By default interface's fields are public, static, final & methods are public, abstract
  * Since java 8 - default & static method 
  * Since java 9 - private method

* Packages - 

  * If you import a package, subpackages will not be imported.
  * If you import a package, all the classes and interface of that package will be imported excluding the classes and interfaces of the subpackages. Hence, you need to import the subpackage as well.

* Object class methods(total 9 methods)
  1. toString() - provide string representation oof object. 
                  public String toString()
                  {
                    return getClass().getName() + "@" + Integer.toHexString(hashCode());
                  }
  2. hashCode() - jvm generate the unque code called hashcode. A common misconception about this method is that hashCode() method returns the address of object, which is not correct. It convert the internal address of object to an integer by using an algorithm. Override of hashCode() method needs to be done such that for every object we generate a unique number. (for ex. i did in hashSet)
  3. 


































